name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install ngrok
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Expand-Archive ngrok.zip -DestinationPath "$env:USERPROFILE\ngrok"
          echo "$env:USERPROFILE\ngrok" | Out-File -FilePath $env:GITHUB_PATH -Append
          & "$env:USERPROFILE\ngrok\ngrok.exe" config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Start ngrok tunnel
        shell: pwsh
        run: Start-Process -NoNewWindow -FilePath ngrok -ArgumentList "http 8000"

      - name: Get ngrok public URL
        id: get_ngrok_url
        shell: pwsh
        run: |
          Start-Sleep -Seconds 5  # Wait for ngrok to start
          $NGROK_URL = (Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels").tunnels[0].public_url
          echo "NGROK_URL=$NGROK_URL" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "SERVER_IP=$NGROK_URL" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "✅ NGROK_URL is set: $NGROK_URL"

      - name: Create and Update .env file
        shell: pwsh
        run: |
          Set-Content -Path .env -Value "SERVER_IP=${{ env.NGROK_URL }}"
          Add-Content -Path .env -Value "NGROK_URL=${{ env.NGROK_URL }}"
          echo "✅ .env file created with SERVER_IP and NGROK_URL"

      - name: Deploy to Windows Server
        shell: pwsh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          USER: ${{ secrets.USER }}
          SERVER_IP: ${{ env.SERVER_IP }}
        run: |
          if (-not ${{ secrets.SSH_PRIVATE_KEY }}) { echo "❌ SSH_PRIVATE_KEY is missing"; exit 1 } else { echo "✅ SSH_PRIVATE_KEY is set" }
          if (-not ${{ env.SERVER_IP }}) { echo "❌ SERVER_IP is missing"; exit 1 } else { echo "✅ SERVER_IP is set: ${{ env.SERVER_IP }}" }
          if (-not ${{ secrets.USER }}) { echo "❌ USER is missing"; exit 1 } else { echo "✅ USER is set" }

          Set-Content -Path deploy_key.pem -Value "${{ secrets.SSH_PRIVATE_KEY }}"
          icacls deploy_key.pem /inheritance:r
          icacls deploy_key.pem /grant:r "$($env:USERNAME):(R)"

          ssh -v -o StrictHostKeyChecking=no -i deploy_key.pem $USER@$SERVER_IP powershell << 'EOF'
            cd C:\Users\DELL\Desktop\fastapi-book-project
            
            git pull origin main
            
            C:\Users\DELL\Desktop\fastapi-book-project\venv\Scripts\python.exe -m pip install -r requirements.txt
            
            taskkill /F /IM python.exe || echo "No FastAPI process running"
            start /B "" "C:\Users\DELL\Desktop\fastapi-book-project\venv\Scripts\uvicorn.exe" main:app --host 0.0.0.0 --port 8000
          EOF

name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Start ngrok tunnel
        run: |
          ngrok http 8080 > /dev/null &
          sleep 10

      - name: Get ngrok public URL
        id: get_ngrok_url
        run: |
          NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
          echo "Public URL: $NGROK_URL"

      - name: Check for running processes on port 8080
        run: sudo netstat -tulnp | grep :8080 || echo "No conflicts on port 8080"

      - name: Install & Configure Nginx
        run: |
          sudo apt update
          sudo apt install -y nginx
          sudo bash -c 'cat > /etc/nginx/sites-available/default <<EOF
          server {
              listen 8080;
              location / {
                  proxy_pass http://127.0.0.1:8000/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }
          EOF'
          sudo nginx -t
          sudo systemctl reload nginx

      - name: Debug Nginx Status
        run: |
          sudo systemctl status nginx
          sudo journalctl -xeu nginx

      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          USER: ${{ secrets.USER }}
          SERVER_IP: ${{ env.NGROK_URL }}
        run: |
          echo "Deploying to $SERVER_IP"
          echo "$SSH_PRIVATE_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem $USER@$SERVER_IP "
            cd ~/fastapi-app &&
            git pull origin main &&
            source venv/bin/activate &&
            pip install -r requirements.txt &&
            pkill -f 'uvicorn' || true &&
            nohup uvicorn main:app --host 0.0.0.0 --port 8000 &
          "
          echo "Deployment successful."

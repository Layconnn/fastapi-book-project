name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install ngrok
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Expand-Archive ngrok.zip -DestinationPath "$env:USERPROFILE\ngrok"
          echo "$env:USERPROFILE\ngrok" | Out-File -FilePath $env:GITHUB_PATH -Append
          & "$env:USERPROFILE\ngrok\ngrok.exe" config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Start ngrok tunnel
        shell: pwsh
        run: |
          Start-Process -NoNewWindow -PassThru -FilePath ngrok -ArgumentList "http 8000"
          Start-Sleep -Seconds 8  # Ensure ngrok has time to start

      - name: Get ngrok public URL
        id: get_ngrok_url
        shell: pwsh
        run: |
          $attempts = 0
          $ngrokUrl = $null
          while ($attempts -lt 10) {
            Start-Sleep -Seconds 5
            try {
              $ngrokResponse = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -ErrorAction Stop
              if ($ngrokResponse.tunnels.Count -gt 0) {
                $ngrokUrl = $ngrokResponse.tunnels[0].public_url
                break
              }
            } catch {
              Write-Host "‚ö†Ô∏è ngrok is not ready yet. Retrying..."
            }
            $attempts++
          }

          if (-not $ngrokUrl) {
            Write-Host "‚ùå Failed to retrieve ngrok URL after 10 attempts."
            exit 1
          }

          echo "NGROK_URL=$ngrokUrl" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "SERVER_IP=$ngrokUrl" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "‚úÖ NGROK_URL is set: $ngrokUrl"

      - name: Create and Update .env file
        shell: pwsh
        run: |
          if (-not "${{ env.NGROK_URL }}") { echo "‚ùå NGROK_URL is missing"; exit 1 }

          Set-Content -Path .env -Value "SERVER_IP=${{ env.NGROK_URL }}"
          Add-Content -Path .env -Value "NGROK_URL=${{ env.NGROK_URL }}"
          echo "‚úÖ .env file created with SERVER_IP and NGROK_URL"

      - name: Deploy to Windows Server
        shell: pwsh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          USER: ${{ secrets.USER }}
          SERVER_IP: ${{ env.SERVER_IP }}
        run: |
          if (-not "${{ secrets.SSH_PRIVATE_KEY }}") { echo "‚ùå SSH_PRIVATE_KEY is missing"; exit 1 }
          if (-not "${{ env.SERVER_IP }}") { echo "‚ùå SERVER_IP is missing"; exit 1 }
          if (-not "${{ secrets.USER }}") { echo "‚ùå USER is missing"; exit 1 }

          echo "‚úÖ All required secrets and environment variables are set."

          Set-Content -Path deploy_key.pem -Value "${{ secrets.SSH_PRIVATE_KEY }}"
          icacls deploy_key.pem /inheritance:r
          icacls deploy_key.pem /grant:r "$($env:USERNAME):(R)"

          ssh -v -o StrictHostKeyChecking=no -i deploy_key.pem $USER@$SERVER_IP powershell << 'EOF'
            cd C:\Users\DELL\Desktop\fastapi-book-project

            echo "üöÄ Pulling latest changes from Git..."
            git pull origin main

            echo "üì¶ Installing dependencies..."
            C:\Users\DELL\Desktop\fastapi-book-project\venv\Scripts\python.exe -m pip install -r requirements.txt

            echo "üõë Stopping any running FastAPI process..."
            taskkill /F /IM python.exe || echo "No FastAPI process running"

            echo "‚úÖ Starting FastAPI server..."
            start /B "" "C:\Users\DELL\Desktop\fastapi-book-project\venv\Scripts\uvicorn.exe" main:app --host 0.0.0.0 --port 8000
          EOF
